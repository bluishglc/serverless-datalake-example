Description: 'Install Serverless Datalake Example (For AWS Non-China Regions)'
Metadata:
  AUTHOR: 'Laurence Geng'
Parameters:
  InstanceType:
    Description: SDL Server EC2 Instance Type
    Type: String
    Default: m5.large
    AllowedValues: [ t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
                     t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
                     m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
                     m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
                     c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
                     g3.8xlarge,
                     r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
                     i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
                     d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge ]
  AccessCIDR:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The IP address range that can be used to access to the EC2 instance
    MaxLength: '18'
    MinLength: '9'
    Type: String
    Default: 0.0.0.0/0
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: id_rsa_aws
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  SubnetId:
    Description: The Public subnet where the ec2 instance will be launched
    Type: AWS::EC2::Subnet::Id
  VpcId:
    Description: The VPC to launch the SDL server
    Type: AWS::EC2::VPC::Id
  KeyFileS3Path:
    Description: >-
      The key file path of your private S3, the key file is the private ssh key which can login EMR nodes via SSH.
    Type: String
    AllowedPattern: '^/|//|(/[\w-]+)+(.pem)$'
    ConstraintDescription: >-
      Can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/), end with '.pem', for example: /my-bucket/my-key.pem
  ImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  AppBucket:
    Description: The bucket name to store application files.
    Type: String
    Default: 'sdl-app'
  DataBucket:
    Description: The bucket name to store application files.
    Type: String
    Default: 'sdl-data'
  AirflowDagsHome:
    Description: The bucket name to store application files.
    Type: String
  AccessKeyId:
    Description: The bucket name to store application files.
    Type: String
  SecretAccessKey:
    Description: The bucket name to store application files.
    Type: String

Resources:
  IntanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Principal:
              Service: ec2.amazonaws.com.cn
            Effect: Allow
            Sid: ''
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - 'arn:aws-cn:s3:::*'
                  - 'arn:aws-cn:s3:::*/*'
                Effect: Allow
          PolicyName: AuthenticatedS3GetObjects
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref IntanceRole
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'ssh access to instance'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AccessCIDR
      VpcId: !Ref VpcId
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: !Split
        - ','
        - !Join
          - ','
          - - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !Ref SubnetId
      UserData: !Base64
        Fn::Sub:
          |
          #!/bin/bash
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region} --configsets Init
          # sleep for a while so as instance initialing, otherwise, network or other resources may be not available
          sleep 30
          wget https://github.com/bluishglc/serverless-datalake-example/releases/download/v1.0/serverless-datalake-example-1.0.zip -P /tmp/
          unzip -o /tmp/serverless-datalake-example-1.0.zip -d /opt/
          sh /opt/serverless-datalake-example-1.0/bin/install.sh \
          --region ${AWS::Region} \
          --app-bucket ${AppBucket} \
          --data-bucket ${DataBucket} \
          --airflow-dags-home ${AirflowDagsHome} \
          --access-key-id ${AccessKeyId} \
          --secret-access-key ${SecretAccessKey} &> /home/ec2-user/serverless-datalake-example-1.0.log
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: SDL Server
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName:
            Ref: IntanceRole
      AWS::CloudFormation::Init:
        configSets:
          Init:
            - GetKeyFile
        GetKeyFile:
          files:
            /home/ec2-user/key.pem:
              source: !Sub
                - >-
                  https://s3.${AWS::Region}.amazonaws.com.cn${KeyFileS3Path}
                - KeyFileS3Path: !Ref KeyFileS3Path
              mode: '000600'
              authentication: S3AccessCreds
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT60M
Outputs:
  PublicIP:
    Description: IP address of the newly created EC2 instance
    Value: !GetAtt [Ec2Instance, PublicIp]